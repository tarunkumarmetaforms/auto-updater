name: 'Build and Release'

on:
  push:
    branches:
      - development
      - qa 
      - main2
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - development
      - qa
      - main2

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target aarch64-apple-darwin'
          - platform: 'macos-latest' 
            args: '--target x86_64-apple-darwin'
          - platform: 'ubuntu-22.04'
            args: ''
          - platform: 'windows-latest'
            args: ''

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Install frontend dependencies
        run: pnpm install

      - name: Determine build configuration
        id: config
        run: |
          if [[ "${{ github.ref }}" == refs/heads/development ]]; then
            echo "config=dev" >> $GITHUB_OUTPUT
            echo "environment=Development" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == refs/heads/qa ]]; then
            echo "config=qa" >> $GITHUB_OUTPUT  
            echo "environment=QA" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == refs/heads/main2 ]]; then
            echo "config=prod" >> $GITHUB_OUTPUT
            echo "environment=Production" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == refs/tags/* ]]; then
            echo "config=prod" >> $GITHUB_OUTPUT
            echo "environment=Production" >> $GITHUB_OUTPUT
          else
            echo "config=dev" >> $GITHUB_OUTPUT
            echo "environment=Development" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - name: Build the app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        with:
          tagName: ${{ github.ref_name }}
          releaseName: 'Auto Updater v__VERSION__ (${{ steps.config.outputs.environment }})'
          releaseBody: |
            ## What's Changed
            
            This release includes the latest changes from the ${{ steps.config.outputs.environment }} environment.
            
            ### Environment: ${{ steps.config.outputs.environment }}
            - Branch: ${{ github.ref_name }}
            - Commit: ${{ github.sha }}
            - Build Date: ${{ github.run_number }}
            
            ### Installation
            Download the appropriate installer for your platform below.
            
            ### Verification
            All binaries are signed and can be verified using the included signatures.
            
            **Full Changelog**: https://github.com/${{ github.repository }}/commits/${{ github.ref_name }}
          releaseDraft: ${{ !startsWith(github.ref, 'refs/tags/') }}
          prerelease: ${{ steps.config.outputs.config != 'prod' }}
          args: >
            ${{ matrix.args }}
            --config src-tauri/tauri.${{ steps.config.outputs.config }}.conf.json
            --verbose

  # Create GitHub release summary (only for tagged releases)
  release-summary:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Create Release Summary
        run: |
          # Extract version from tag
          VERSION=${GITHUB_REF#refs/tags/v}
          
          echo "âœ… Successfully created release v$VERSION"
          echo "ðŸ“¦ Repository: tarunkumarmetaforms/auto-updater"
          echo "ðŸ”— Release URL: https://github.com/tarunkumarmetaforms/auto-updater/releases/tag/${{ github.ref_name }}"
          echo "ðŸš€ Auto-updater will use GitHub releases API for updates"
          
          # The Tauri updater will automatically detect new releases via:
          # - Dev: https://api.github.com/repos/tarunkumarmetaforms/auto-updater/releases/latest
          # - QA: https://api.github.com/repos/tarunkumarmetaforms/auto-updater/releases
          # - Prod: https://api.github.com/repos/tarunkumarmetaforms/auto-updater/releases/latest

  # Security scan
  security-audit:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable
        
      - name: Install cargo-audit
        run: cargo install cargo-audit
        
      - name: Run security audit
        run: cargo audit
        working-directory: ./src-tauri

  # Test the application
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Install dependencies
        run: pnpm install

      - name: Run frontend tests
        run: pnpm test || echo "No tests configured"

      - name: Run Rust tests
        run: cargo test
        working-directory: ./src-tauri

      - name: Check formatting
        run: |
          cargo fmt --check
          pnpm prettier --check . || echo "Prettier not configured"
        working-directory: ./src-tauri 